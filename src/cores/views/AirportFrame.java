
package cores.views;

import cores.models.Location;
import cores.models.Passenger;
import cores.models.Flight;
import cores.models.Plane;
import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Color;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author edangulo
 */
public class AirportFrame extends javax.swing.JFrame {

    /**
     * Creates new form AirportFrame
     */
    private int x, y;
    private ArrayList<Passenger> passengers;
    private ArrayList<Plane> planes;
    private ArrayList<Location> locations;
    private ArrayList<Flight> flights;

    public AirportFrame() {
        initComponents();

        this.passengers = new ArrayList<>();
        this.planes = new ArrayList<>();
        this.locations = new ArrayList<>();
        this.flights = new ArrayList<>();

        this.setBackground(new Color(0, 0, 0, 0));
        this.setLocationRelativeTo(null);

        this.generateMonths();
        this.generateDays();
        this.generateHours();
        this.generateMinutes();
        this.blockPanels();
    }

    private void blockPanels() {
        //9, 11
        for (int i = 1; i < jTabbedPane1.getTabCount(); i++) {
            if (i != 9 && i != 11) {
                jTabbedPane1.setEnabledAt(i, false);
            }
        }
    }

    private void generateMonths() {
        for (int i = 1; i < 13; i++) {
            MONTH.addItem("" + i);
            DEPARTUREMONTH.addItem("" + i);
            UpdBirthMonth.addItem("" + i);
        }
    }

    private void generateDays() {
        for (int i = 1; i < 32; i++) {
            DAY.addItem("" + i);
            DEPARTUREDAY.addItem("" + i);
            UpdBirthDay.addItem("" + i);
        }
    }

    private void generateHours() {
        for (int i = 0; i < 24; i++) {
            HOURDEPARTURE.addItem("" + i);
            ARRIVALHOUR.addItem("" + i);
            SCALEHOUR.addItem("" + i);
            DelayHour.addItem("" + i);
        }
    }

    private void generateMinutes() {
        for (int i = 0; i < 60; i++) {
            MINUTEDEPARTURE.addItem("" + i);
            ARRIVALMINUTE.addItem("" + i);
            SCALEMINUTE.addItem("" + i);
            Delayminutes.addItem("" + i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelRound1 = new cores.models.PanelRound();
        panelRound2 = new cores.models.PanelRound();
        Exit = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        UserSelection = new javax.swing.JPanel();
        user = new javax.swing.JRadioButton();
        administrator = new javax.swing.JRadioButton();
        userSelect = new javax.swing.JComboBox<>();
        PassengerRegistration = new javax.swing.JPanel();
        LabelPassengerCountry = new javax.swing.JLabel();
        LabelPassengerId = new javax.swing.JLabel();
        LabelPassengerFirsname = new javax.swing.JLabel();
        LabelPassengerLastname = new javax.swing.JLabel();
        LabelPassengerBirthdate = new javax.swing.JLabel();
        LabelCountryCode = new javax.swing.JLabel();
        CountryCode = new javax.swing.JTextField();
        PassengerId = new javax.swing.JTextField();
        PassengerBornYear = new javax.swing.JTextField();
        CountryPassenger = new javax.swing.JTextField();
        PassengerPhone = new javax.swing.JTextField();
        LabelPassengerPhone = new javax.swing.JLabel();
        LabelBirthdate = new javax.swing.JLabel();
        PassengerLastname = new javax.swing.JTextField();
        LabelPhone = new javax.swing.JLabel();
        MONTH = new javax.swing.JComboBox<>();
        PassengerFirstname = new javax.swing.JTextField();
        LabelBirthDate2 = new javax.swing.JLabel();
        DAY = new javax.swing.JComboBox<>();
        RegisterPassenger = new javax.swing.JButton();
        PlaneRegistration = new javax.swing.JPanel();
        LabelPlaneId = new javax.swing.JLabel();
        PlaneId = new javax.swing.JTextField();
        LabelBrandPlane = new javax.swing.JLabel();
        PlaneBrand = new javax.swing.JTextField();
        PlaneModel = new javax.swing.JTextField();
        LabelPlaneModel = new javax.swing.JLabel();
        PlaneMaxCapacity = new javax.swing.JTextField();
        LabelPlaneCapacity = new javax.swing.JLabel();
        PlaneAirline = new javax.swing.JTextField();
        LabelAirline = new javax.swing.JLabel();
        CreatePlane = new javax.swing.JButton();
        AirportRegistration = new javax.swing.JPanel();
        LabelAirportId = new javax.swing.JLabel();
        AirportId = new javax.swing.JTextField();
        LabelAirportName = new javax.swing.JLabel();
        AirportName = new javax.swing.JTextField();
        AirportCity = new javax.swing.JTextField();
        LabelAirportCity = new javax.swing.JLabel();
        LabelAirportCountry = new javax.swing.JLabel();
        AirportCountry = new javax.swing.JTextField();
        AirportLatitude = new javax.swing.JTextField();
        LabelAirportLatitude = new javax.swing.JLabel();
        LabelAirportLongitude = new javax.swing.JLabel();
        AirportLongitude = new javax.swing.JTextField();
        AirportCreate = new javax.swing.JButton();
        FlightRegistration = new javax.swing.JPanel();
        LabelFlightId = new javax.swing.JLabel();
        FlightId = new javax.swing.JTextField();
        LabelPlane = new javax.swing.JLabel();
        PlaneList = new javax.swing.JComboBox<>();
        DepartureList = new javax.swing.JComboBox<>();
        LabelDepartureLocation = new javax.swing.JLabel();
        ArrivalList = new javax.swing.JComboBox<>();
        LabelArrivalLocation = new javax.swing.JLabel();
        LabelScaleLocation = new javax.swing.JLabel();
        ScaleList = new javax.swing.JComboBox<>();
        LabelScaleDuration = new javax.swing.JLabel();
        LabelArrivalDuration = new javax.swing.JLabel();
        LabelDepartureDate = new javax.swing.JLabel();
        DepartureDateYear = new javax.swing.JTextField();
        LabelDeparture = new javax.swing.JLabel();
        DEPARTUREMONTH = new javax.swing.JComboBox<>();
        LabelDeparture1 = new javax.swing.JLabel();
        DEPARTUREDAY = new javax.swing.JComboBox<>();
        LabelDeparture2 = new javax.swing.JLabel();
        HOURDEPARTURE = new javax.swing.JComboBox<>();
        LabelDeparture3 = new javax.swing.JLabel();
        MINUTEDEPARTURE = new javax.swing.JComboBox<>();
        ARRIVALHOUR = new javax.swing.JComboBox<>();
        LabelArrival1 = new javax.swing.JLabel();
        ARRIVALMINUTE = new javax.swing.JComboBox<>();
        Labelscale1 = new javax.swing.JLabel();
        SCALEHOUR = new javax.swing.JComboBox<>();
        SCALEMINUTE = new javax.swing.JComboBox<>();
        CreateFlight = new javax.swing.JButton();
        UpdatePassengerInfo = new javax.swing.JPanel();
        Labelid = new javax.swing.JLabel();
        UpdatedId = new javax.swing.JTextField();
        LabelupdFirstname = new javax.swing.JLabel();
        PassengerUpdFirstname = new javax.swing.JTextField();
        LabelupdLastname = new javax.swing.JLabel();
        PassengerUpdLastname = new javax.swing.JTextField();
        LabelupdBirthdate = new javax.swing.JLabel();
        PassengerUpdBirthYear = new javax.swing.JTextField();
        UpdBirthMonth = new javax.swing.JComboBox<>();
        UpdBirthDay = new javax.swing.JComboBox<>();
        PassengerUpdPhone = new javax.swing.JTextField();
        Labelupdphone = new javax.swing.JLabel();
        PassengerUpdPhoneCode = new javax.swing.JTextField();
        Labelupdphone1 = new javax.swing.JLabel();
        Labelupdphone2 = new javax.swing.JLabel();
        Labelupdcountry = new javax.swing.JLabel();
        PassengerUpdCountry = new javax.swing.JTextField();
        UPDATE = new javax.swing.JButton();
        AddToFlight = new javax.swing.JPanel();
        AddPassengerId = new javax.swing.JTextField();
        LabeladdPassenger = new javax.swing.JLabel();
        Labelflightadd = new javax.swing.JLabel();
        FlightaddList = new javax.swing.JComboBox<>();
        ADD = new javax.swing.JButton();
        ShowFlightsPassenger = new javax.swing.JPanel();
        ListOfFlightsPassenger = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        REFRESHFLIGHTS = new javax.swing.JButton();
        ShowPassengers = new javax.swing.JPanel();
        PassengersList = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        refreshPassengersList = new javax.swing.JButton();
        ShowFlights = new javax.swing.JPanel();
        FlightsList = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        RefreshFlightsList = new javax.swing.JButton();
        ShowPlanes = new javax.swing.JPanel();
        RefreshPlanesList = new javax.swing.JButton();
        Planeslist = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        ShowAirports = new javax.swing.JPanel();
        AirportList = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        RefreshAirportList = new javax.swing.JButton();
        DelayFlight = new javax.swing.JPanel();
        DelayHour = new javax.swing.JComboBox<>();
        Labeldelayhours = new javax.swing.JLabel();
        LabelDelayFlightid = new javax.swing.JLabel();
        DelayFlightId = new javax.swing.JComboBox<>();
        LabelDelayminutes = new javax.swing.JLabel();
        Delayminutes = new javax.swing.JComboBox<>();
        Delaybutton = new javax.swing.JButton();
        panelRound3 = new cores.models.PanelRound();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panelRound1.setRadius(40);
        panelRound1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelRound2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelRound2MouseDragged(evt);
            }
        });
        panelRound2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelRound2MousePressed(evt);
            }
        });

        Exit.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        Exit.setText("X");
        Exit.setBorderPainted(false);
        Exit.setContentAreaFilled(false);
        Exit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRound2Layout = new javax.swing.GroupLayout(panelRound2);
        panelRound2.setLayout(panelRound2Layout);
        panelRound2Layout.setHorizontalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRound2Layout.createSequentialGroup()
                .addContainerGap(1083, Short.MAX_VALUE)
                .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        panelRound2Layout.setVerticalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound2Layout.createSequentialGroup()
                .addComponent(Exit)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        panelRound1.add(panelRound2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1150, -1));

        jTabbedPane1.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N

        UserSelection.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        user.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        user.setText("User");
        user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userActionPerformed(evt);
            }
        });
        UserSelection.add(user, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 230, -1, -1));

        administrator.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        administrator.setText("Administrator");
        administrator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                administratorActionPerformed(evt);
            }
        });
        UserSelection.add(administrator, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 164, -1, -1));

        userSelect.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        userSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select User" }));
        userSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userSelectActionPerformed(evt);
            }
        });
        UserSelection.add(userSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 300, 130, -1));

        jTabbedPane1.addTab("Administration", UserSelection);

        PassengerRegistration.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LabelPassengerCountry.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelPassengerCountry.setText("Country:");
        PassengerRegistration.add(LabelPassengerCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 400, -1, -1));

        LabelPassengerId.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelPassengerId.setText("ID:");
        PassengerRegistration.add(LabelPassengerId, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        LabelPassengerFirsname.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelPassengerFirsname.setText("First Name:");
        PassengerRegistration.add(LabelPassengerFirsname, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, -1));

        LabelPassengerLastname.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelPassengerLastname.setText("Last Name:");
        PassengerRegistration.add(LabelPassengerLastname, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, -1, -1));

        LabelPassengerBirthdate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelPassengerBirthdate.setText("Birthdate:");
        PassengerRegistration.add(LabelPassengerBirthdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, -1, -1));

        LabelCountryCode.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelCountryCode.setText("+");
        PassengerRegistration.add(LabelCountryCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, 20, -1));

        CountryCode.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegistration.add(CountryCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 340, 50, -1));

        PassengerId.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegistration.add(PassengerId, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 130, -1));

        PassengerBornYear.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegistration.add(PassengerBornYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 280, 90, -1));

        CountryPassenger.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegistration.add(CountryPassenger, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 400, 130, -1));

        PassengerPhone.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegistration.add(PassengerPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 340, 130, -1));

        LabelPassengerPhone.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelPassengerPhone.setText("Phone:");
        PassengerRegistration.add(LabelPassengerPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, -1, -1));

        LabelBirthdate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelBirthdate.setText("-");
        PassengerRegistration.add(LabelBirthdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 280, 30, -1));

        PassengerLastname.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegistration.add(PassengerLastname, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 220, 130, -1));

        LabelPhone.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelPhone.setText("-");
        PassengerRegistration.add(LabelPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 340, 30, -1));

        MONTH.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        MONTH.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month" }));
        PassengerRegistration.add(MONTH, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 280, -1, -1));

        PassengerFirstname.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PassengerRegistration.add(PassengerFirstname, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, 130, -1));

        LabelBirthDate2.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelBirthDate2.setText("-");
        PassengerRegistration.add(LabelBirthDate2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 280, 30, -1));

        DAY.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DAY.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));
        PassengerRegistration.add(DAY, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 280, -1, -1));

        RegisterPassenger.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        RegisterPassenger.setText("Register");
        RegisterPassenger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterPassengerActionPerformed(evt);
            }
        });
        PassengerRegistration.add(RegisterPassenger, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 480, -1, -1));

        jTabbedPane1.addTab("Passenger registration", PassengerRegistration);

        PlaneRegistration.setLayout(null);

        LabelPlaneId.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelPlaneId.setText("ID:");
        PlaneRegistration.add(LabelPlaneId);
        LabelPlaneId.setBounds(53, 96, 22, 25);

        PlaneId.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PlaneRegistration.add(PlaneId);
        PlaneId.setBounds(180, 93, 130, 31);

        LabelBrandPlane.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelBrandPlane.setText("Brand:");
        PlaneRegistration.add(LabelBrandPlane);
        LabelBrandPlane.setBounds(53, 157, 50, 25);

        PlaneBrand.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PlaneRegistration.add(PlaneBrand);
        PlaneBrand.setBounds(180, 154, 130, 31);

        PlaneModel.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PlaneRegistration.add(PlaneModel);
        PlaneModel.setBounds(180, 213, 130, 31);

        LabelPlaneModel.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelPlaneModel.setText("Model:");
        PlaneRegistration.add(LabelPlaneModel);
        LabelPlaneModel.setBounds(53, 216, 55, 25);

        PlaneMaxCapacity.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PlaneRegistration.add(PlaneMaxCapacity);
        PlaneMaxCapacity.setBounds(180, 273, 130, 31);

        LabelPlaneCapacity.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelPlaneCapacity.setText("Max Capacity:");
        PlaneRegistration.add(LabelPlaneCapacity);
        LabelPlaneCapacity.setBounds(53, 276, 109, 25);

        PlaneAirline.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PlaneRegistration.add(PlaneAirline);
        PlaneAirline.setBounds(180, 333, 130, 31);

        LabelAirline.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelAirline.setText("Airline:");
        PlaneRegistration.add(LabelAirline);
        LabelAirline.setBounds(53, 336, 70, 25);

        CreatePlane.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        CreatePlane.setText("Create");
        CreatePlane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreatePlaneActionPerformed(evt);
            }
        });
        PlaneRegistration.add(CreatePlane);
        CreatePlane.setBounds(490, 480, 120, 40);

        jTabbedPane1.addTab("Airplane registration", PlaneRegistration);

        LabelAirportId.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelAirportId.setText("Airport ID:");

        AirportId.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        LabelAirportName.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelAirportName.setText("Airport name:");

        AirportName.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        AirportCity.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        LabelAirportCity.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelAirportCity.setText("Airport city:");

        LabelAirportCountry.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelAirportCountry.setText("Airport country:");

        AirportCountry.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        AirportLatitude.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        LabelAirportLatitude.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelAirportLatitude.setText("Airport latitude:");

        LabelAirportLongitude.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelAirportLongitude.setText("Airport longitude:");

        AirportLongitude.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        AirportCreate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AirportCreate.setText("Create");
        AirportCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AirportCreateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AirportRegistrationLayout = new javax.swing.GroupLayout(AirportRegistration);
        AirportRegistration.setLayout(AirportRegistrationLayout);
        AirportRegistrationLayout.setHorizontalGroup(
            AirportRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AirportRegistrationLayout.createSequentialGroup()
                .addGroup(AirportRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AirportRegistrationLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(AirportRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelAirportId)
                            .addComponent(LabelAirportName)
                            .addComponent(LabelAirportCity)
                            .addComponent(LabelAirportCountry)
                            .addComponent(LabelAirportLatitude)
                            .addComponent(LabelAirportLongitude))
                        .addGap(80, 80, 80)
                        .addGroup(AirportRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AirportLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AirportId, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AirportName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AirportCity, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AirportCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AirportLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(AirportRegistrationLayout.createSequentialGroup()
                        .addGap(515, 515, 515)
                        .addComponent(AirportCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(515, 515, 515))
        );
        AirportRegistrationLayout.setVerticalGroup(
            AirportRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AirportRegistrationLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(AirportRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(AirportRegistrationLayout.createSequentialGroup()
                        .addComponent(LabelAirportId)
                        .addGap(36, 36, 36)
                        .addComponent(LabelAirportName)
                        .addGap(34, 34, 34)
                        .addComponent(LabelAirportCity)
                        .addGap(35, 35, 35)
                        .addComponent(LabelAirportCountry)
                        .addGap(35, 35, 35)
                        .addComponent(LabelAirportLatitude))
                    .addGroup(AirportRegistrationLayout.createSequentialGroup()
                        .addComponent(AirportId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(AirportName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(AirportCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(AirportCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(AirportLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(44, 44, 44)
                .addGroup(AirportRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelAirportLongitude)
                    .addComponent(AirportLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(AirportCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );

        jTabbedPane1.addTab("Airport registrarion", AirportRegistration);

        LabelFlightId.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelFlightId.setText("ID:");

        FlightId.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        LabelPlane.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelPlane.setText("Plane:");

        PlaneList.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        PlaneList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Plane" }));

        DepartureList.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DepartureList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location" }));

        LabelDepartureLocation.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelDepartureLocation.setText("Departure location:");

        ArrivalList.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ArrivalList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location" }));

        LabelArrivalLocation.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelArrivalLocation.setText("Arrival location:");

        LabelScaleLocation.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelScaleLocation.setText("Scale location:");

        ScaleList.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ScaleList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location" }));

        LabelScaleDuration.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelScaleDuration.setText("Duration:");

        LabelArrivalDuration.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelArrivalDuration.setText("Duration:");

        LabelDepartureDate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelDepartureDate.setText("Departure date:");

        DepartureDateYear.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        LabelDeparture.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelDeparture.setText("-");

        DEPARTUREMONTH.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DEPARTUREMONTH.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month" }));

        LabelDeparture1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelDeparture1.setText("-");

        DEPARTUREDAY.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DEPARTUREDAY.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));

        LabelDeparture2.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelDeparture2.setText("-");

        HOURDEPARTURE.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        HOURDEPARTURE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        LabelDeparture3.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelDeparture3.setText("-");

        MINUTEDEPARTURE.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        MINUTEDEPARTURE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        ARRIVALHOUR.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ARRIVALHOUR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        LabelArrival1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelArrival1.setText("-");

        ARRIVALMINUTE.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ARRIVALMINUTE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        Labelscale1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        Labelscale1.setText("-");

        SCALEHOUR.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        SCALEHOUR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        SCALEMINUTE.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        SCALEMINUTE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        CreateFlight.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        CreateFlight.setText("Create");
        CreateFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateFlightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FlightRegistrationLayout = new javax.swing.GroupLayout(FlightRegistration);
        FlightRegistration.setLayout(FlightRegistrationLayout);
        FlightRegistrationLayout.setHorizontalGroup(
            FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FlightRegistrationLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(FlightRegistrationLayout.createSequentialGroup()
                        .addComponent(LabelScaleLocation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ScaleList, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FlightRegistrationLayout.createSequentialGroup()
                        .addComponent(LabelArrivalLocation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ArrivalList, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(FlightRegistrationLayout.createSequentialGroup()
                        .addComponent(LabelDepartureLocation)
                        .addGap(46, 46, 46)
                        .addComponent(DepartureList, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(FlightRegistrationLayout.createSequentialGroup()
                        .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelFlightId)
                            .addComponent(LabelPlane))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FlightId)
                            .addComponent(PlaneList, 0, 130, Short.MAX_VALUE))))
                .addGap(45, 45, 45)
                .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelScaleDuration)
                    .addComponent(LabelArrivalDuration)
                    .addComponent(LabelDepartureDate))
                .addGap(18, 18, 18)
                .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FlightRegistrationLayout.createSequentialGroup()
                        .addComponent(DepartureDateYear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FlightRegistrationLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(DEPARTUREMONTH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(LabelDeparture, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelDeparture1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(FlightRegistrationLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(DEPARTUREDAY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FlightRegistrationLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(HOURDEPARTURE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(LabelDeparture2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelDeparture3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(FlightRegistrationLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(MINUTEDEPARTURE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30))
                    .addGroup(FlightRegistrationLayout.createSequentialGroup()
                        .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FlightRegistrationLayout.createSequentialGroup()
                                .addComponent(ARRIVALHOUR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LabelArrival1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(FlightRegistrationLayout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(ARRIVALMINUTE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(FlightRegistrationLayout.createSequentialGroup()
                                .addComponent(SCALEHOUR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Labelscale1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(FlightRegistrationLayout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(SCALEMINUTE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FlightRegistrationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CreateFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(530, 530, 530))
        );
        FlightRegistrationLayout.setVerticalGroup(
            FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FlightRegistrationLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FlightRegistrationLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(LabelFlightId))
                    .addComponent(FlightId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelPlane)
                    .addComponent(PlaneList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HOURDEPARTURE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelDeparture2)
                    .addComponent(LabelDeparture3)
                    .addComponent(MINUTEDEPARTURE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(FlightRegistrationLayout.createSequentialGroup()
                        .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(LabelDepartureLocation)
                                .addComponent(DepartureList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(LabelDepartureDate))
                            .addComponent(DepartureDateYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DEPARTUREMONTH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabelDeparture)
                            .addComponent(LabelDeparture1)
                            .addComponent(DEPARTUREDAY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(LabelArrivalLocation)
                                .addComponent(ArrivalList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(LabelArrivalDuration))
                            .addComponent(ARRIVALHOUR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabelArrival1)
                            .addComponent(ARRIVALMINUTE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SCALEHOUR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Labelscale1)
                            .addComponent(SCALEMINUTE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(FlightRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(LabelScaleLocation)
                                .addComponent(ScaleList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(LabelScaleDuration)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addComponent(CreateFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        jTabbedPane1.addTab("Flight registration", FlightRegistration);

        Labelid.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        Labelid.setText("ID:");

        UpdatedId.setEditable(false);
        UpdatedId.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        UpdatedId.setEnabled(false);

        LabelupdFirstname.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelupdFirstname.setText("First Name:");

        PassengerUpdFirstname.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        LabelupdLastname.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelupdLastname.setText("Last Name:");

        PassengerUpdLastname.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        LabelupdBirthdate.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelupdBirthdate.setText("Birthdate:");

        PassengerUpdBirthYear.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        UpdBirthMonth.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        UpdBirthMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month" }));

        UpdBirthDay.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        UpdBirthDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day" }));

        PassengerUpdPhone.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        Labelupdphone.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        Labelupdphone.setText("-");

        PassengerUpdPhoneCode.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        Labelupdphone1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        Labelupdphone1.setText("+");

        Labelupdphone2.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        Labelupdphone2.setText("Phone:");

        Labelupdcountry.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        Labelupdcountry.setText("Country:");

        PassengerUpdCountry.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N

        UPDATE.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        UPDATE.setText("Update");
        UPDATE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPDATEActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UpdatePassengerInfoLayout = new javax.swing.GroupLayout(UpdatePassengerInfo);
        UpdatePassengerInfo.setLayout(UpdatePassengerInfoLayout);
        UpdatePassengerInfoLayout.setHorizontalGroup(
            UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                                .addComponent(Labelid)
                                .addGap(108, 108, 108)
                                .addComponent(UpdatedId, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                                .addComponent(LabelupdFirstname)
                                .addGap(41, 41, 41)
                                .addComponent(PassengerUpdFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                                .addComponent(LabelupdLastname)
                                .addGap(43, 43, 43)
                                .addComponent(PassengerUpdLastname, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                                .addComponent(LabelupdBirthdate)
                                .addGap(55, 55, 55)
                                .addComponent(PassengerUpdBirthYear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(UpdBirthMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(UpdBirthDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                                .addComponent(Labelupdphone2)
                                .addGap(56, 56, 56)
                                .addComponent(Labelupdphone1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(PassengerUpdPhoneCode, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(Labelupdphone, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(PassengerUpdPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                                .addComponent(Labelupdcountry)
                                .addGap(63, 63, 63)
                                .addComponent(PassengerUpdCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                        .addGap(507, 507, 507)
                        .addComponent(UPDATE)))
                .addContainerGap(555, Short.MAX_VALUE))
        );
        UpdatePassengerInfoLayout.setVerticalGroup(
            UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdatePassengerInfoLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Labelid)
                    .addComponent(UpdatedId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelupdFirstname)
                    .addComponent(PassengerUpdFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelupdLastname)
                    .addComponent(PassengerUpdLastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelupdBirthdate)
                    .addComponent(PassengerUpdBirthYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdBirthMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdBirthDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Labelupdphone2)
                    .addComponent(Labelupdphone1)
                    .addComponent(PassengerUpdPhoneCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Labelupdphone)
                    .addComponent(PassengerUpdPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(UpdatePassengerInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Labelupdcountry)
                    .addComponent(PassengerUpdCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(UPDATE)
                .addGap(113, 113, 113))
        );

        jTabbedPane1.addTab("Update info", UpdatePassengerInfo);

        AddPassengerId.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        AddPassengerId.setEnabled(false);

        LabeladdPassenger.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabeladdPassenger.setText("ID:");

        Labelflightadd.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        Labelflightadd.setText("Flight:");

        FlightaddList.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        FlightaddList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Flight" }));

        ADD.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        ADD.setText("Add");
        ADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AddToFlightLayout = new javax.swing.GroupLayout(AddToFlight);
        AddToFlight.setLayout(AddToFlightLayout);
        AddToFlightLayout.setHorizontalGroup(
            AddToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddToFlightLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(AddToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabeladdPassenger)
                    .addComponent(Labelflightadd))
                .addGap(79, 79, 79)
                .addGroup(AddToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FlightaddList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddPassengerId, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(829, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddToFlightLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ADD, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(509, 509, 509))
        );
        AddToFlightLayout.setVerticalGroup(
            AddToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddToFlightLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(AddToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddToFlightLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(LabeladdPassenger))
                    .addComponent(AddPassengerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(AddToFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Labelflightadd)
                    .addComponent(FlightaddList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 288, Short.MAX_VALUE)
                .addComponent(ADD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );

        jTabbedPane1.addTab("Add to flight", AddToFlight);

        jTable1.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Departure Date", "Arrival Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ListOfFlightsPassenger.setViewportView(jTable1);

        REFRESHFLIGHTS.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        REFRESHFLIGHTS.setText("Refresh");
        REFRESHFLIGHTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REFRESHFLIGHTSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ShowFlightsPassengerLayout = new javax.swing.GroupLayout(ShowFlightsPassenger);
        ShowFlightsPassenger.setLayout(ShowFlightsPassengerLayout);
        ShowFlightsPassengerLayout.setHorizontalGroup(
            ShowFlightsPassengerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowFlightsPassengerLayout.createSequentialGroup()
                .addGap(269, 269, 269)
                .addComponent(ListOfFlightsPassenger, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(291, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ShowFlightsPassengerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(REFRESHFLIGHTS)
                .addGap(527, 527, 527))
        );
        ShowFlightsPassengerLayout.setVerticalGroup(
            ShowFlightsPassengerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowFlightsPassengerLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(ListOfFlightsPassenger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(REFRESHFLIGHTS)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Show my flights", ShowFlightsPassenger);

        jTable2.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Birthdate", "Age", "Phone", "Country", "Num Flight"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PassengersList.setViewportView(jTable2);

        refreshPassengersList.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        refreshPassengersList.setText("Refresh");
        refreshPassengersList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshPassengersListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ShowPassengersLayout = new javax.swing.GroupLayout(ShowPassengers);
        ShowPassengers.setLayout(ShowPassengersLayout);
        ShowPassengersLayout.setHorizontalGroup(
            ShowPassengersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowPassengersLayout.createSequentialGroup()
                .addGroup(ShowPassengersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShowPassengersLayout.createSequentialGroup()
                        .addGap(489, 489, 489)
                        .addComponent(refreshPassengersList))
                    .addGroup(ShowPassengersLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(PassengersList, javax.swing.GroupLayout.PREFERRED_SIZE, 1078, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        ShowPassengersLayout.setVerticalGroup(
            ShowPassengersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ShowPassengersLayout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addComponent(PassengersList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(refreshPassengersList)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Show all passengers", ShowPassengers);

        jTable3.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Departure Airport ID", "Arrival Airport ID", "Scale Airport ID", "Departure Date", "Arrival Date", "Plane ID", "Number Passengers"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        FlightsList.setViewportView(jTable3);

        RefreshFlightsList.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        RefreshFlightsList.setText("Refresh");
        RefreshFlightsList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshFlightsListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ShowFlightsLayout = new javax.swing.GroupLayout(ShowFlights);
        ShowFlights.setLayout(ShowFlightsLayout);
        ShowFlightsLayout.setHorizontalGroup(
            ShowFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowFlightsLayout.createSequentialGroup()
                .addGroup(ShowFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShowFlightsLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(FlightsList, javax.swing.GroupLayout.PREFERRED_SIZE, 1100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ShowFlightsLayout.createSequentialGroup()
                        .addGap(521, 521, 521)
                        .addComponent(RefreshFlightsList)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        ShowFlightsLayout.setVerticalGroup(
            ShowFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowFlightsLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(FlightsList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(RefreshFlightsList)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Show all flights", ShowFlights);

        RefreshPlanesList.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        RefreshPlanesList.setText("Refresh");
        RefreshPlanesList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshPlanesListActionPerformed(evt);
            }
        });

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Brand", "Model", "Max Capacity", "Airline", "Number Flights"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Planeslist.setViewportView(jTable4);

        javax.swing.GroupLayout ShowPlanesLayout = new javax.swing.GroupLayout(ShowPlanes);
        ShowPlanes.setLayout(ShowPlanesLayout);
        ShowPlanesLayout.setHorizontalGroup(
            ShowPlanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowPlanesLayout.createSequentialGroup()
                .addGroup(ShowPlanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShowPlanesLayout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(RefreshPlanesList))
                    .addGroup(ShowPlanesLayout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(Planeslist, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(189, Short.MAX_VALUE))
        );
        ShowPlanesLayout.setVerticalGroup(
            ShowPlanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ShowPlanesLayout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addComponent(Planeslist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(RefreshPlanesList)
                .addGap(17, 17, 17))
        );

        jTabbedPane1.addTab("Show all planes", ShowPlanes);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airport ID", "Airport Name", "City", "Country"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AirportList.setViewportView(jTable5);

        RefreshAirportList.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        RefreshAirportList.setText("Refresh");
        RefreshAirportList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshAirportListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ShowAirportsLayout = new javax.swing.GroupLayout(ShowAirports);
        ShowAirports.setLayout(ShowAirportsLayout);
        ShowAirportsLayout.setHorizontalGroup(
            ShowAirportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShowAirportsLayout.createSequentialGroup()
                .addGroup(ShowAirportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShowAirportsLayout.createSequentialGroup()
                        .addGap(508, 508, 508)
                        .addComponent(RefreshAirportList))
                    .addGroup(ShowAirportsLayout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addComponent(AirportList, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(272, Short.MAX_VALUE))
        );
        ShowAirportsLayout.setVerticalGroup(
            ShowAirportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ShowAirportsLayout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(AirportList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(RefreshAirportList)
                .addGap(17, 17, 17))
        );

        jTabbedPane1.addTab("Show all locations", ShowAirports);

        DelayHour.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DelayHour.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour" }));

        Labeldelayhours.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        Labeldelayhours.setText("Hours:");

        LabelDelayFlightid.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelDelayFlightid.setText("ID:");

        DelayFlightId.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        DelayFlightId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID" }));

        LabelDelayminutes.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        LabelDelayminutes.setText("Minutes:");

        Delayminutes.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        Delayminutes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute" }));

        Delaybutton.setFont(new java.awt.Font("Yu Gothic UI", 0, 18)); // NOI18N
        Delaybutton.setText("Delay");
        Delaybutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelaybuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DelayFlightLayout = new javax.swing.GroupLayout(DelayFlight);
        DelayFlight.setLayout(DelayFlightLayout);
        DelayFlightLayout.setHorizontalGroup(
            DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DelayFlightLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DelayFlightLayout.createSequentialGroup()
                        .addComponent(LabelDelayminutes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Delayminutes, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DelayFlightLayout.createSequentialGroup()
                        .addGroup(DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelDelayFlightid)
                            .addComponent(Labeldelayhours))
                        .addGap(79, 79, 79)
                        .addGroup(DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DelayHour, 0, 105, Short.MAX_VALUE)
                            .addComponent(DelayFlightId, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(820, 820, 820))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DelayFlightLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Delaybutton)
                .addGap(531, 531, 531))
        );
        DelayFlightLayout.setVerticalGroup(
            DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DelayFlightLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelDelayFlightid)
                    .addComponent(DelayFlightId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Labeldelayhours)
                    .addComponent(DelayHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(DelayFlightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelDelayminutes)
                    .addComponent(Delayminutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 307, Short.MAX_VALUE)
                .addComponent(Delaybutton)
                .addGap(33, 33, 33))
        );

        jTabbedPane1.addTab("Delay flight", DelayFlight);

        panelRound1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 41, 1150, 620));

        javax.swing.GroupLayout panelRound3Layout = new javax.swing.GroupLayout(panelRound3);
        panelRound3.setLayout(panelRound3Layout);
        panelRound3Layout.setHorizontalGroup(
            panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1150, Short.MAX_VALUE)
        );
        panelRound3Layout.setVerticalGroup(
            panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        panelRound1.add(panelRound3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, 660, 1150, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRound1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRound1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void panelRound2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelRound2MousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_panelRound2MousePressed

    private void panelRound2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelRound2MouseDragged
        this.setLocation(this.getLocation().x + evt.getX() - x, this.getLocation().y + evt.getY() - y);
    }//GEN-LAST:event_panelRound2MouseDragged

    private void administratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_administratorActionPerformed
        if (user.isSelected()) {
            user.setSelected(false);
            userSelect.setSelectedIndex(0);

        }
        for (int i = 1; i < jTabbedPane1.getTabCount(); i++) {
            jTabbedPane1.setEnabledAt(i, true);
        }
        jTabbedPane1.setEnabledAt(5, false);
        jTabbedPane1.setEnabledAt(6, false);
    }//GEN-LAST:event_administratorActionPerformed

    private void userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userActionPerformed
        if (administrator.isSelected()) {
            administrator.setSelected(false);
        }
        for (int i = 1; i < jTabbedPane1.getTabCount(); i++) {

            jTabbedPane1.setEnabledAt(i, false);

        }
        jTabbedPane1.setEnabledAt(9, true);
        jTabbedPane1.setEnabledAt(5, true);
        jTabbedPane1.setEnabledAt(6, true);
        jTabbedPane1.setEnabledAt(7, true);
        jTabbedPane1.setEnabledAt(11, true);
    }//GEN-LAST:event_userActionPerformed

    private void RegisterPassengerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterPassengerActionPerformed
        // TODO add your handling code here:
        long id = Long.parseLong(PassengerId.getText());
        String firstname = PassengerFirstname.getText();
        String lastname = PassengerLastname.getText();
        int year = Integer.parseInt(PassengerBornYear.getText());
        int month = Integer.parseInt(MONTH.getItemAt(MONTH.getSelectedIndex()));
        int day = Integer.parseInt(DAY.getItemAt(DAY.getSelectedIndex()));
        int phoneCode = Integer.parseInt(CountryCode.getText());
        long phone = Long.parseLong(PassengerPhone.getText());
        String country = CountryPassenger.getText();

        LocalDate birthDate = LocalDate.of(year, month, day);

        this.passengers.add(new Passenger(id, firstname, lastname, birthDate, phoneCode, phone, country));
        this.userSelect.addItem("" + id);
    }//GEN-LAST:event_RegisterPassengerActionPerformed

    private void CreatePlaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreatePlaneActionPerformed
        // TODO add your handling code here:
        String id = PlaneId.getText();
        String brand = PlaneBrand.getText();
        String model = PlaneModel.getText();
        int maxCapacity = Integer.parseInt(PlaneMaxCapacity.getText());
        String airline = PlaneAirline.getText();

        this.planes.add(new Plane(id, brand, model, maxCapacity, airline));

        this.PlaneList.addItem(id);
    }//GEN-LAST:event_CreatePlaneActionPerformed

    private void AirportCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AirportCreateActionPerformed
        // TODO add your handling code here:
        String id = AirportId.getText();
        String name = AirportName.getText();
        String city = AirportCity.getText();
        String country = AirportCountry.getText();
        double latitude = Double.parseDouble(AirportLatitude.getText());
        double longitude = Double.parseDouble(AirportLongitude.getText());

        this.locations.add(new Location(id, name, city, country, latitude, longitude));

        this.DepartureList.addItem(id);
        this.ArrivalList.addItem(id);
        this.ScaleList.addItem(id);
    }//GEN-LAST:event_AirportCreateActionPerformed

    private void CreateFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateFlightActionPerformed
        // TODO add your handling code here:
        String id = FlightId.getText();
        String planeId = PlaneList.getItemAt(PlaneList.getSelectedIndex());
        String departureLocationId = DepartureList.getItemAt(DepartureList.getSelectedIndex());
        String arrivalLocationId = ArrivalList.getItemAt(ArrivalList.getSelectedIndex());
        String scaleLocationId = ScaleList.getItemAt(ScaleList.getSelectedIndex());
        int year = Integer.parseInt(DepartureDateYear.getText());
        int month = Integer.parseInt(DEPARTUREMONTH.getItemAt(DEPARTUREMONTH.getSelectedIndex()));
        int day = Integer.parseInt(DEPARTUREDAY.getItemAt(DEPARTUREDAY.getSelectedIndex()));
        int hour = Integer.parseInt(HOURDEPARTURE.getItemAt(HOURDEPARTURE.getSelectedIndex()));
        int minutes = Integer.parseInt(MINUTEDEPARTURE.getItemAt(MINUTEDEPARTURE.getSelectedIndex()));
        int hoursDurationsArrival = Integer.parseInt(ARRIVALHOUR.getItemAt(ARRIVALHOUR.getSelectedIndex()));
        int minutesDurationsArrival = Integer.parseInt(ARRIVALMINUTE.getItemAt(ARRIVALMINUTE.getSelectedIndex()));
        int hoursDurationsScale = Integer.parseInt(SCALEHOUR.getItemAt(SCALEHOUR.getSelectedIndex()));
        int minutesDurationsScale = Integer.parseInt(SCALEMINUTE.getItemAt(SCALEMINUTE.getSelectedIndex()));

        LocalDateTime departureDate = LocalDateTime.of(year, month, day, hour, minutes);

        Plane plane = null;
        for (Plane p : this.planes) {
            if (planeId.equals(p.getId())) {
                plane = p;
            }
        }

        Location departure = null;
        Location arrival = null;
        Location scale = null;
        for (Location location : this.locations) {
            if (departureLocationId.equals(location.getAirportId())) {
                departure = location;
            }
            if (arrivalLocationId.equals(location.getAirportId())) {
                arrival = location;
            }
            if (scaleLocationId.equals(location.getAirportId())) {
                scale = location;
            }
        }

        if (scale == null) {
            this.flights.add(new Flight(id, plane, departure, arrival, departureDate, hoursDurationsArrival, minutesDurationsArrival));
        } else {
            this.flights.add(new Flight(id, plane, departure, scale, arrival, departureDate, hoursDurationsArrival, minutesDurationsArrival, hoursDurationsScale, minutesDurationsScale));
        }

        this.FlightaddList.addItem(id);
    }//GEN-LAST:event_CreateFlightActionPerformed

    private void UPDATEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPDATEActionPerformed
        // TODO add your handling code here:
        long id = Long.parseLong(UpdatedId.getText());
        String firstname = PassengerUpdFirstname.getText();
        String lastname = PassengerUpdLastname.getText();
        int year = Integer.parseInt(PassengerUpdBirthYear.getText());
        int month = Integer.parseInt(MONTH.getItemAt(UpdBirthMonth.getSelectedIndex()));
        int day = Integer.parseInt(DAY.getItemAt(UpdBirthDay.getSelectedIndex()));
        int phoneCode = Integer.parseInt(PassengerUpdPhoneCode.getText());
        long phone = Long.parseLong(PassengerUpdPhone.getText());
        String country = PassengerUpdCountry.getText();

        LocalDate birthDate = LocalDate.of(year, month, day);

        Passenger passenger = null;
        for (Passenger p : this.passengers) {
            if (p.getId() == id) {
                passenger = p;
            }
        }

        passenger.setFirstname(firstname);
        passenger.setLastname(lastname);
        passenger.setBirthDate(birthDate);
        passenger.setCountryPhoneCode(phoneCode);
        passenger.setPhone(phone);
        passenger.setCountry(country);
    }//GEN-LAST:event_UPDATEActionPerformed

    private void ADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDActionPerformed
        // TODO add your handling code here:
        long passengerId = Long.parseLong(AddPassengerId.getText());
        String flightId = FlightaddList.getItemAt(FlightaddList.getSelectedIndex());

        Passenger passenger = null;
        Flight flight = null;

        for (Passenger p : this.passengers) {
            if (p.getId() == passengerId) {
                passenger = p;
            }
        }

        for (Flight f : this.flights) {
            if (flightId.equals(f.getId())) {
                flight = f;
            }
        }

        passenger.addFlight(flight);
        flight.addPassenger(passenger);
    }//GEN-LAST:event_ADDActionPerformed

    private void DelaybuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelaybuttonActionPerformed
        // TODO add your handling code here:
        String flightId = DelayFlightId.getItemAt(DelayFlightId.getSelectedIndex());
        int hours = Integer.parseInt(DelayHour.getItemAt(DelayHour.getSelectedIndex()));
        int minutes = Integer.parseInt(Delayminutes.getItemAt(Delayminutes.getSelectedIndex()));

        Flight flight = null;
        for (Flight f : this.flights) {
            if (flightId.equals(f.getId())) {
                flight = f;
            }
        }

        flight.delay(hours, minutes);
    }//GEN-LAST:event_DelaybuttonActionPerformed

    private void REFRESHFLIGHTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REFRESHFLIGHTSActionPerformed
        // TODO add your handling code here:
        long passengerId = Long.parseLong(userSelect.getItemAt(userSelect.getSelectedIndex()));

        Passenger passenger = null;
        for (Passenger p : this.passengers) {
            if (p.getId() == passengerId) {
                passenger = p;
            }
        }

        ArrayList<Flight> flights = passenger.getFlights();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (Flight flight : flights) {
            model.addRow(new Object[]{flight.getId(), flight.getDepartureDate(), flight.calculateArrivalDate()});
        }
    }//GEN-LAST:event_REFRESHFLIGHTSActionPerformed

    private void refreshPassengersListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshPassengersListActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        for (Passenger passenger : this.passengers) {
            model.addRow(new Object[]{passenger.getId(), passenger.getFullname(), passenger.getBirthDate(), passenger.calculateAge(), passenger.generateFullPhone(), passenger.getCountry(), passenger.getNumFlights()});
        }
    }//GEN-LAST:event_refreshPassengersListActionPerformed

    private void RefreshFlightsListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshFlightsListActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        model.setRowCount(0);
        for (Flight flight : this.flights) {
            model.addRow(new Object[]{flight.getId(), flight.getDepartureLocation().getAirportId(), flight.getArrivalLocation().getAirportId(), (flight.getScaleLocation() == null ? "-" : flight.getScaleLocation().getAirportId()), flight.getDepartureDate(), flight.calculateArrivalDate(), flight.getPlane().getId(), flight.getNumPassengers()});
        }
    }//GEN-LAST:event_RefreshFlightsListActionPerformed

    private void RefreshPlanesListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshPlanesListActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
        model.setRowCount(0);
        for (Plane plane : this.planes) {
            model.addRow(new Object[]{plane.getId(), plane.getBrand(), plane.getModel(), plane.getMaxCapacity(), plane.getAirline(), plane.getNumFlights()});
        }
    }//GEN-LAST:event_RefreshPlanesListActionPerformed

    private void RefreshAirportListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshAirportListActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable5.getModel();
        model.setRowCount(0);
        for (Location location : this.locations) {
            model.addRow(new Object[]{location.getAirportId(), location.getAirportName(), location.getAirportCity(), location.getAirportCountry()});
        }
    }//GEN-LAST:event_RefreshAirportListActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void userSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userSelectActionPerformed
        try {
            String id = userSelect.getSelectedItem().toString();
            if (!id.equals(userSelect.getItemAt(0))) {
                UpdatedId.setText(id);
                AddPassengerId.setText(id);
            } else {
                UpdatedId.setText("");
                AddPassengerId.setText("");
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_userSelectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADD;
    private javax.swing.JComboBox<String> ARRIVALHOUR;
    private javax.swing.JComboBox<String> ARRIVALMINUTE;
    private javax.swing.JTextField AddPassengerId;
    private javax.swing.JPanel AddToFlight;
    private javax.swing.JTextField AirportCity;
    private javax.swing.JTextField AirportCountry;
    private javax.swing.JButton AirportCreate;
    private javax.swing.JTextField AirportId;
    private javax.swing.JTextField AirportLatitude;
    private javax.swing.JScrollPane AirportList;
    private javax.swing.JTextField AirportLongitude;
    private javax.swing.JTextField AirportName;
    private javax.swing.JPanel AirportRegistration;
    private javax.swing.JComboBox<String> ArrivalList;
    private javax.swing.JTextField CountryCode;
    private javax.swing.JTextField CountryPassenger;
    private javax.swing.JButton CreateFlight;
    private javax.swing.JButton CreatePlane;
    private javax.swing.JComboBox<String> DAY;
    private javax.swing.JComboBox<String> DEPARTUREDAY;
    private javax.swing.JComboBox<String> DEPARTUREMONTH;
    private javax.swing.JPanel DelayFlight;
    private javax.swing.JComboBox<String> DelayFlightId;
    private javax.swing.JComboBox<String> DelayHour;
    private javax.swing.JButton Delaybutton;
    private javax.swing.JComboBox<String> Delayminutes;
    private javax.swing.JTextField DepartureDateYear;
    private javax.swing.JComboBox<String> DepartureList;
    private javax.swing.JButton Exit;
    private javax.swing.JTextField FlightId;
    private javax.swing.JPanel FlightRegistration;
    private javax.swing.JComboBox<String> FlightaddList;
    private javax.swing.JScrollPane FlightsList;
    private javax.swing.JComboBox<String> HOURDEPARTURE;
    private javax.swing.JLabel LabelAirline;
    private javax.swing.JLabel LabelAirportCity;
    private javax.swing.JLabel LabelAirportCountry;
    private javax.swing.JLabel LabelAirportId;
    private javax.swing.JLabel LabelAirportLatitude;
    private javax.swing.JLabel LabelAirportLongitude;
    private javax.swing.JLabel LabelAirportName;
    private javax.swing.JLabel LabelArrival1;
    private javax.swing.JLabel LabelArrivalDuration;
    private javax.swing.JLabel LabelArrivalLocation;
    private javax.swing.JLabel LabelBirthDate2;
    private javax.swing.JLabel LabelBirthdate;
    private javax.swing.JLabel LabelBrandPlane;
    private javax.swing.JLabel LabelCountryCode;
    private javax.swing.JLabel LabelDelayFlightid;
    private javax.swing.JLabel LabelDelayminutes;
    private javax.swing.JLabel LabelDeparture;
    private javax.swing.JLabel LabelDeparture1;
    private javax.swing.JLabel LabelDeparture2;
    private javax.swing.JLabel LabelDeparture3;
    private javax.swing.JLabel LabelDepartureDate;
    private javax.swing.JLabel LabelDepartureLocation;
    private javax.swing.JLabel LabelFlightId;
    private javax.swing.JLabel LabelPassengerBirthdate;
    private javax.swing.JLabel LabelPassengerCountry;
    private javax.swing.JLabel LabelPassengerFirsname;
    private javax.swing.JLabel LabelPassengerId;
    private javax.swing.JLabel LabelPassengerLastname;
    private javax.swing.JLabel LabelPassengerPhone;
    private javax.swing.JLabel LabelPhone;
    private javax.swing.JLabel LabelPlane;
    private javax.swing.JLabel LabelPlaneCapacity;
    private javax.swing.JLabel LabelPlaneId;
    private javax.swing.JLabel LabelPlaneModel;
    private javax.swing.JLabel LabelScaleDuration;
    private javax.swing.JLabel LabelScaleLocation;
    private javax.swing.JLabel LabeladdPassenger;
    private javax.swing.JLabel Labeldelayhours;
    private javax.swing.JLabel Labelflightadd;
    private javax.swing.JLabel Labelid;
    private javax.swing.JLabel Labelscale1;
    private javax.swing.JLabel LabelupdBirthdate;
    private javax.swing.JLabel LabelupdFirstname;
    private javax.swing.JLabel LabelupdLastname;
    private javax.swing.JLabel Labelupdcountry;
    private javax.swing.JLabel Labelupdphone;
    private javax.swing.JLabel Labelupdphone1;
    private javax.swing.JLabel Labelupdphone2;
    private javax.swing.JScrollPane ListOfFlightsPassenger;
    private javax.swing.JComboBox<String> MINUTEDEPARTURE;
    private javax.swing.JComboBox<String> MONTH;
    private javax.swing.JTextField PassengerBornYear;
    private javax.swing.JTextField PassengerFirstname;
    private javax.swing.JTextField PassengerId;
    private javax.swing.JTextField PassengerLastname;
    private javax.swing.JTextField PassengerPhone;
    private javax.swing.JPanel PassengerRegistration;
    private javax.swing.JTextField PassengerUpdBirthYear;
    private javax.swing.JTextField PassengerUpdCountry;
    private javax.swing.JTextField PassengerUpdFirstname;
    private javax.swing.JTextField PassengerUpdLastname;
    private javax.swing.JTextField PassengerUpdPhone;
    private javax.swing.JTextField PassengerUpdPhoneCode;
    private javax.swing.JScrollPane PassengersList;
    private javax.swing.JTextField PlaneAirline;
    private javax.swing.JTextField PlaneBrand;
    private javax.swing.JTextField PlaneId;
    private javax.swing.JComboBox<String> PlaneList;
    private javax.swing.JTextField PlaneMaxCapacity;
    private javax.swing.JTextField PlaneModel;
    private javax.swing.JPanel PlaneRegistration;
    private javax.swing.JScrollPane Planeslist;
    private javax.swing.JButton REFRESHFLIGHTS;
    private javax.swing.JButton RefreshAirportList;
    private javax.swing.JButton RefreshFlightsList;
    private javax.swing.JButton RefreshPlanesList;
    private javax.swing.JButton RegisterPassenger;
    private javax.swing.JComboBox<String> SCALEHOUR;
    private javax.swing.JComboBox<String> SCALEMINUTE;
    private javax.swing.JComboBox<String> ScaleList;
    private javax.swing.JPanel ShowAirports;
    private javax.swing.JPanel ShowFlights;
    private javax.swing.JPanel ShowFlightsPassenger;
    private javax.swing.JPanel ShowPassengers;
    private javax.swing.JPanel ShowPlanes;
    private javax.swing.JButton UPDATE;
    private javax.swing.JComboBox<String> UpdBirthDay;
    private javax.swing.JComboBox<String> UpdBirthMonth;
    private javax.swing.JPanel UpdatePassengerInfo;
    private javax.swing.JTextField UpdatedId;
    private javax.swing.JPanel UserSelection;
    private javax.swing.JRadioButton administrator;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private cores.models.PanelRound panelRound1;
    private cores.models.PanelRound panelRound2;
    private cores.models.PanelRound panelRound3;
    private javax.swing.JButton refreshPassengersList;
    private javax.swing.JRadioButton user;
    private javax.swing.JComboBox<String> userSelect;
    // End of variables declaration//GEN-END:variables
}
